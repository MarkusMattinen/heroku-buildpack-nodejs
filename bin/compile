#!/usr/bin/env bash

set -e            # fail fast
set -o pipefail   # dont ignore exit codes when piping output
# set -x          # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2
env_file=$3

bp_dir=$(cd $(dirname $0); cd ..; pwd)

# Load some convenience functions like status(), echo(), and indent()
source $bp_dir/bin/common.sh

# Look in package.json's engines.node field for a semver range
semver_range=$(cat $build_dir/package.json | $bp_dir/vendor/jq -r .engines.node)
npm_semver_range=$(cat $build_dir/package.json | $bp_dir/vendor/jq -r .engines.npm)

# Resolve node version using semver.io
node_version=$(curl --silent --get --data-urlencode "range=${semver_range}" https://semver.io/node/resolve)
npm_version=$(curl --silent --get --data-urlencode "range=${npm_semver_range}" https://semver.io/npm/resolve)

# Recommend using semver ranges in a safe manner
if [ "$semver_range" == "null" ]; then
  protip "Specify a node version in package.json"
  semver_range=""
elif [ "$semver_range" == "*" ]; then
  protip "Avoid using semver ranges like '*' in engines.node"
elif [ ${semver_range:0:1} == ">" ]; then
  protip "Avoid using semver ranges starting with '>' in engines.node"
fi

if [ "$npm_semver_range" == "null" ]; then
  npm_semver_range=""
fi

# Output info about requested range and resolved node version
if [ "$semver_range" == "" ]; then
  status "Defaulting to latest stable node: $node_version"
else
  status "Requested node range:  $semver_range"
  status "Resolved node version: $node_version"
fi

# Download node from Heroku's S3 mirror of nodejs.org/dist
if [ ! -f "$cache_dir/node-v$node_version-linux-x64.tar.gz" ]; then
  status "Downloading and installing node (first run)"
  node_url="http://s3pository.heroku.com/node/v$node_version/node-v$node_version-linux-x64.tar.gz"
  curl $node_url -s -o - | tee $cache_dir/node-v$node_version-linux-x64.tar.gz | tar xzf - -C $build_dir
else
  status "Installing node"
  node_url="http://s3pository.heroku.com/node/v$node_version/node-v$node_version-linux-x64.tar.gz"
  tar xzf $cache_dir/node-v$node_version-linux-x64.tar.gz -C $build_dir
fi

# Move node (and npm) into ./vendor and make them executable
mkdir -p $build_dir/vendor/node
rsync -a $build_dir/node-v$node_version-linux-x64/ $build_dir/vendor/node/
rm -rf $build_dir/node-v$node_version-linux-x64
chmod +x $build_dir/vendor/node/bin/*
PATH="$build_dir/vendor/node/bin:$PATH"

installed_npm_version="$(npm --version)"
if [ "$npm_semver_range" == "" ]; then
  status "Using default npm version: $installed_npm_version"
else
  status "Requested npm range: $npm_semver_range"
  if [ "$installed_npm_version" == "$npm_version" ]; then
    status "npm $installed_npm_version already installed with node"
  else
    status "Installing npm $npm_version (replacing version $installed_npm_version)..."
    npm install --unsafe-perm --quiet -g npm@$npm_version 2>&1 >/dev/null
  fi
fi

# Run subsequent node/npm commands from the build path
cd $build_dir

# Isolate temp directory and clean it up after we exit
export TMPDIR=$(mktemp -d)
function cleanup_tmp {
  (shopt -s dotglob; rm -rf $TMPDIR/*)
}
trap cleanup_tmp INT TERM EXIT

# Scope config var availability only to `npm install`
(
  if [ -f "$env_file" ]; then
    status "Importing application config vars"
    export $(egrep -v "^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)" "$env_file")
  fi

  status "Installing dependencies"
  # Make npm output to STDOUT instead of its default STDERR
  npm install --unsafe-perm --userconfig $build_dir/.npmrc --production 2>&1 | indent
)

status "Cleaning up node-gyp and npm artifacts"
rm -rf "$build_dir/.node-gyp"
rm -rf "$build_dir/.npm"

status "Cleaning up temporary files"
trap - INT TERM EXIT
cleanup_tmp

# If Procfile is absent, try to create one using `npm start`
if [ ! -e $build_dir/Procfile ]; then
  npm_start=$(cat $build_dir/package.json | $bp_dir/vendor/jq -r .scripts.start)

  # If `scripts.start` is set in package.json, or a server.js file
  # is present in the app root, then create a default Procfile
  if [ "$npm_start" != "null" ] || [ -f $build_dir/server.js ]; then
    status "No Procfile found; Adding npm start to new Procfile"
    echo "web: npm start" > $build_dir/Procfile
  else
    status "Procfile not found and npm start script is undefined"
    protip "Create a Procfile or specify a start script in package.json"
  fi
fi

# Update the PATH
status "Building runtime environment"
mkdir -p $build_dir/.profile.d
echo "export PATH=\"\$HOME/vendor/node/bin:\$HOME/bin:\$HOME/node_modules/.bin:\$PATH\";" > $build_dir/.profile.d/nodejs.sh
